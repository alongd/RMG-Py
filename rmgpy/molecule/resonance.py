#!/usr/bin/env python
# encoding: utf-8

################################################################################
#
#   RMG - Reaction Mechanism Generator
#
#   Copyright (c) 2002-2017 Prof. William H. Green (whgreen@mit.edu), 
#   Prof. Richard H. West (r.west@neu.edu) and the RMG Team (rmg_dev@mit.edu)
#
#   Permission is hereby granted, free of charge, to any person obtaining a
#   copy of this software and associated documentation files (the 'Software'),
#   to deal in the Software without restriction, including without limitation
#   the rights to use, copy, modify, merge, publish, distribute, sublicense,
#   and/or sell copies of the Software, and to permit persons to whom the
#   Software is furnished to do so, subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be included in
#   all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
#   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
#   DEALINGS IN THE SOFTWARE.
#
################################################################################

"""
This module contains methods for generation of resonance structures of molecules.

The main function to generate all relevant resonance structures for a given
Molecule object is ``generateResonanceStructures``. It calls the necessary
functions for generating each type of resonance structure.

Currently supported resonance types:
- All species:
    - ``generateAdjacentResonanceStructures``: single radical shift with double or triple bond
    - ``generateLonePairRadicalResonanceStructures``: single radical shift with lone pair
    - ``generateLonePairMultipleBondResonanceStructures``: multiple bond shift with lone pair
- Aromatic species only:
    - ``generateAromaticResonanceStructures``: fully delocalized structure, where all aromatic rings have benzene bonds
    - ``generateKekuleStructure``: generate a single Kekule structure for an aromatic compound (single/double bond form)
    - ``generateOppositeKekuleStructure``: for monocyclic aromatic species, rotate the double bond assignment
    - ``generateClarStructures``: generate all structures with the maximum number of pi-sextet assignments
"""

import cython
import logging
import itertools

from .graph import Vertex, Edge, Graph, getVertexConnectivityValue
from .molecule import Atom, Bond, Molecule
from .kekulize import kekulize
import rmgpy.molecule.pathfinder as pathfinder
from rmgpy.exceptions import ILPSolutionError, KekulizationError, AtomTypeError
from .element import PeriodicSystem


def populateResonanceAlgorithms(features=None):
    """
    Generate list of resonance structure algorithms relevant to the current molecule.

    Takes a dictionary of features generated by analyzeMolecule().
    Returns a list of resonance algorithms.
    """
    cython.declare(methodList=list)
    methodList = []

    if features is None:
        methodList = [
            generateAdjacentResonanceStructures,
            generateLonePairRadicalResonanceStructures,
            generateLonePairMultipleBondResonanceStructures,
            generateAromaticResonanceStructures,
            generateKekuleStructure,
            generateOppositeKekuleStructure,
            generateClarStructures,
        ]
    else:
        # If the molecule is aromatic, then radical resonance has already been considered
        # If the molecule was falsely identified as aromatic, then isArylRadical will still accurately capture
        # cases where the radical is in an orbital that is orthogonal to the pi orbitals.
        if features['isRadical'] and not features['isAromatic'] and not features['isArylRadical']:
            methodList.append(generateAdjacentResonanceStructures)
        if features['hasLonePairs']:
            methodList.append(generateLonePairRadicalResonanceStructures)
            methodList.append(generateLonePairMultipleBondResonanceStructures)

    return methodList


def analyzeMolecule(mol):
    """
    Identify key features of molecule important for resonance structure generation.
    Returns a dictionary of features.
    """
    cython.declare(features=dict)

    features = {'isRadical': mol.isRadical(),
                'isCyclic': mol.isCyclic(),
                'isAromatic': False,
                'isPolycyclicAromatic': False,
                'isArylRadical': False,
                'hasLonePairs': False,
                }

    if features['isCyclic']:
        aromaticRings = mol.getAromaticRings()[0]
        if len(aromaticRings) > 0:
            features['isAromatic'] = True
        if len(aromaticRings) > 1:
            features['isPolycyclicAromatic'] = True
        if features['isRadical'] and features['isAromatic']:
            features['isArylRadical'] = mol.isArylRadical(aromaticRings)
    for atom in mol.vertices:
        if atom.lonePairs > 0:
            features['hasLonePairs'] = True

    return features


def generateResonanceStructures(mol, clarStructures=True, keepIsomorphic=False, filterStructures=True):
    """
    Generate and return all of the resonance structures for the input molecule.

    Most of the complexity of this method goes into handling aromatic species, particularly to generate an accurate
    set of resonance structures that is consistent regardless of the input structure. The following considerations
    are made:

    1. False positives from RDKit aromaticity detection can occur if a molecule has exocyclic double bonds
    2. False negatives from RDKit aromaticity detection can occur if a radical is delocalized into an aromatic ring
    3. sp2 hybridized radicals in the plane of an aromatic ring do not participate in hyperconjugation
    4. Non-aromatic resonance structures of PAHs are not important resonance contributors (assumption)

    Aromatic species are broken into the following categories for resonance treatment:

    - Radical polycyclic aromatic species: Kekule structures are generated in order to generate adjacent resonance
    structures. The resulting structures are then used for Clar structure generation. After all three steps, any
    non-aromatic structures are removed, under the assumption that they are not important resonance contributors.
    - Radical monocyclic aromatic species: Kekule structures are generated along with adjacent resonance structures.
    All are kept regardless of aromaticity because the radical is more likely to delocalize into the ring.
    - Stable polycyclic aromatic species: Clar structures are generated
    - Stable monocyclic aromatic species: Kekule structures are generated
    """
    cython.declare(molList=list, newMolList=list, features=dict, methodList=list)

    molList = [mol]

    # Analyze molecule
    features = analyzeMolecule(mol)

    # Use generateAromaticResonanceStructures to check for false positives and negatives
    if features['isAromatic'] or (features['isCyclic'] and features['isRadical'] and not features['isArylRadical']):
        newMolList = generateAromaticResonanceStructures(mol, features)
        if len(newMolList) == 0:
            # Encountered false positive, ie. the molecule is not actually aromatic
            features['isAromatic'] = False
            features['isPolycyclicAromatic'] = False
    else:
        newMolList = []

    # Special handling for aromatic species
    if len(newMolList) > 0:
        if features['isRadical'] and not features['isArylRadical']:
            if features['isPolycyclicAromatic']:
                if clarStructures:
                    _generateResonanceStructures(newMolList, [generateKekuleStructure], keepIsomorphic)
                    _generateResonanceStructures(newMolList, [generateAdjacentResonanceStructures], keepIsomorphic)
                    _generateResonanceStructures(newMolList, [generateClarStructures], keepIsomorphic)
                    # Remove non-aromatic structures under the assumption that they aren't important resonance contributors
                    newMolList = [m for m in newMolList if m.isAromatic()]
                else:
                    pass
            else:
                _generateResonanceStructures(newMolList, [generateKekuleStructure,
                                                          generateOppositeKekuleStructure]), keepIsomorphic
                _generateResonanceStructures(newMolList, [generateAdjacentResonanceStructures], keepIsomorphic)
        elif features['isPolycyclicAromatic']:
            if clarStructures:
                _generateResonanceStructures(newMolList, [generateClarStructures], keepIsomorphic)
            else:
                pass
        else:
            # The molecule is an aryl radical or stable mono-ring aromatic
            # In this case, generate the kekulized form
            _generateResonanceStructures(newMolList, [generateKekuleStructure,
                                                      generateOppositeKekuleStructure], keepIsomorphic)

        # Check for isomorphism against the original molecule
        for i, newMol in enumerate(newMolList):
            if not keepIsomorphic and mol.isIsomorphic(newMol):
                # There will be at most one isomorphic molecule, since the new molecules have
                # already been checked against each other, so we can break after removing it
                del newMolList[i]
                break
            elif keepIsomorphic and mol.isIdentical(newMol):
                del newMolList[i]
                break
        # Add the newly generated structures to the original list
        # This is not optimal, but is a temporary measure to ensure compatability until other issues are fixed
        molList.extend(newMolList)

    # Generate remaining resonance structures
    methodList = populateResonanceAlgorithms(features)
    _generateResonanceStructures(molList, methodList, keepIsomorphic)

    if filterStructures:
        return filter_resonance_structures(molList)
    else:
        return molList


def _generateResonanceStructures(molList, methodList, keepIsomorphic=False, copy=False):
    """
    Iteratively generate all resonance structures for a list of starting molecules using the specified methods.

    Args:
        molList             starting list of molecules
        methodList          list of resonance structure algorithms
        keepIsomorphic      if False, removes any structures that give isIsomorphic=True (default)
                            if True, only remove structures that give isIdentical=True
        copy                if False, append new resonance structures to input list (default)
                            if True, make a new list with all of the resonance structures
    """
    cython.declare(index=cython.int, molecule=Molecule, newMolList=list, newMol=Molecule, mol=Molecule)

    if copy:
        # Make a copy of the list so we don't modify the input list
        molList = molList[:]

    # Iterate over resonance isomers
    index = 0
    while index < len(molList):
        molecule = molList[index]
        newMolList = []

        for method in methodList:
            newMolList.extend(method(molecule))

        for newMol in newMolList:
            # Append to isomer list if unique
            for mol in molList:
                if not keepIsomorphic and mol.isIsomorphic(newMol):
                    break
                elif keepIsomorphic and mol.isIdentical(newMol):
                    break
            else:
                molList.append(newMol)

        # Move to next resonance isomer
        index += 1

    return molList


def filter_resonance_structures(molList):
    """
    We often get too many resonance structures from the combination of all rules for species containing lonePairs.
    Here we filter them out by minimizing the number of N/S/O atoms without a full octet.
    For example, w/o filtering we may generate 3,000+ resonance structures for [N]=NON=O,
    vs. only 3 resonance structures after filtering.
    """
    cython.declare(octetDeviation=cython.int, minOctetDeviation=cython.int, val_el=cython.int, i=cython.int)
    cython.declare(octetDeviationList=list, filteredList=list, spanList=list, minSpan=cython.int)
    cython.declare(mol=Molecule, atom=Atom, atom2=Atom, bond12=Bond, num_heavy_atoms=cython.int, j=cython.int)

    minOctetDeviation = 0  # minOctetDeviation is initialized below, so this value (0) has no effect
    octetDeviationList = []
    for mol in molList:
        octetDeviation = 0  # This is the accumulated "score" for each molecule
        for atom in mol.vertices:
            val_el = 2 * (int(atom.getBondOrdersForAtom()) + atom.lonePairs) + atom.radicalElectrons
            if atom.isCarbon():
                octetDeviation += abs(8 - val_el)  # octet on C
                if val_el > 8:
                    octetDeviation += 1  # penalty for C with valance greater than 8 (as in [CH3-.][O+]=O)
            elif atom.isNitrogen():
                if atom.lonePairs:
                    octetDeviation += abs(8 - val_el)  # octet on N p1/2/3
                else:
                    octetDeviation += min(abs(10 - val_el), abs(8 - val_el))  # octed/dectet for N p0
                    # N p0 could also be close to octet and not dectet, such as in O=[N+][O-]
                if val_el > 8:
                    octetDeviation += 1  # penalty for N p0 with valance greater than 8 (as in O=[N.]=O,
                    # [NH2.]=[:NH.], N#N=O, N#[N.]O, CCN=N#N)
            elif atom.isOxygen():
                octetDeviation += abs(8 - val_el)  # octet on O
                if val_el > 8:
                    octetDeviation += 1  # penalty for O with valance greater than 8 (as in O=[N+]=[O-.],
                    # CC=[N+]=[::O-.])
                if atom.atomType.label in ['O4sc', 'O4dc', 'O4tc']:
                    octetDeviation += 1  # penalty for O p1 c+1
                    # (as in [N-2][N+]#[O+], [O-]S#[O+], OS(S)([O-])#[O+], [OH+]=S(O)(=O)[O-], [OH.+][S-]=O;
                    # [C-]#[O+] and [O-][O+]=O which are correct structures also get penalized here, but that's OK
                    # since they are still selected as representative structures according to the rules here.)
            elif atom.isSulfur():
                if atom.lonePairs == 0 and not (val_el == 10 and atom.charge == +1):
                    octetDeviation += abs(12 - val_el)  # duodectet on S p0, eg O=S(=O)(O)O val 12,
                    # O[S](=O)=O val 11; allowing also dected c +1, eg O[S+](=O)(O)[O-] as having no deviation
                    if val_el == 9:
                        octetDeviation += 1  # eg O[S+]([O-])=O val 9 is undesired
                elif atom.lonePairs == 1:
                    octetDeviation += min(abs(8 - val_el), abs(10 - val_el))  # octet/dectet on S p1,
                    # eg [O-][S+]=O val 8, O[S]=O val 9, OS([O])=O val 10
                    if val_el in [7, 11]:
                        octetDeviation += 1  # eg O[S+][O-] val 7, N=[N+]=[S-]=O val 11 are undesired
                elif atom.lonePairs == 2:
                    octetDeviation += min(abs(8 - val_el), abs(10 - val_el))  # octet/dectet on S p2,
                    # eg [S][S] val 7, OS[O] val 8, [NH+]#[N+][S-][O-] val 9, O[S-](O)[N+]#N val 10
                    if val_el == 11:
                        octetDeviation += 1  # eg [NH+]#[N+][S-2]=O val 11 is undesired
                elif atom.lonePairs == 3:
                    octetDeviation += abs(8 - val_el)  # octet on S p3, eg [S-][O+]=O
                    if val_el == 10:
                        octetDeviation += 1  # eg [NH+]#[N+][S-2][O] val 10 is undesired
            if atom.radicalElectrons >= 2 and atom.charge < 0:
                octetDeviation += atom.radicalElectrons  # penalty for tri/birads, e.g. C=C=C([::O..-])O[O+]
        octetDeviationList.append(octetDeviation)
        if octetDeviation < minOctetDeviation or len(octetDeviationList) == 1:
            minOctetDeviation = octetDeviation

    # Filtering using the octet deviation criterion rules out most unrepresentative structures.
    # However, some charge-strained species are still kept, e.g.: [NH]N=S=O <-> [NH+]#[N+][S-][O-]. Here we only allow
    # one level of charge separation. E.g., a +2/-2 charge will only be allowed if the species cannot be represented
    # by a structure with no charge separation, and the number of charge separation instances per structure is limited.
    filteredList = []
    spanList = [[],[]]  # spanList[0] uses for charge span, spanList[1] uses for bond span
    minSpan = 0
    for i in xrange(len(molList)):
        if octetDeviationList[i] == minOctetDeviation:  # legacy octet filtration
            filteredList.append(molList[i])
            spanList[0].append(sum([abs(atom.charge) for atom in molList[i].vertices]) / 2)  # determine charge span
            if spanList[0][-1] < minSpan or len(spanList[0]) == 1:
                minSpan = spanList[0][-1]
            spanList[1].append(2 * mol.toSMILES().count('=') + 3 * mol.toSMILES().count('#'))  # determine bond span

    # Sort filteredList by bond span, the secondary sort criterion, useful for filtering by num_heavy_atoms
    filteredList = [mol for i,mol in sorted(zip(spanList[1], filteredList), key=lambda list1__: list1__[0])]  # !! rename & cythonize list1__

    # Only keep structures with the minimum charge span or one above
    # Also sort by charge span, the primary sort criterion, useful for filtering by num_heavy_atoms
    filteredList = [filteredList[i] for i in xrange(len(filteredList)) if spanList[0][i] == minSpan] + \
                   [filteredList[i] for i in xrange(len(filteredList)) if spanList[0][i] == minSpan + 1]

    # Count N/O/S atoms and carbons in proximity to N/O/S atoms. This will limit the number of resonance structures.
    # If we limit by counting all C/N/O/S atoms, then having a carbon chain on a molecule that we'd like to filter its
    # transitions by this criterion will increase the number of allowed structure on the resonating functional group.
    # Here we count C only if it is adjacent to N/O/S, e.g. may participate in these types of transitions. Still, we may
    # think of cases where having some additional N/O/S atoms in a species will increase the allowed transitions of the
    # resonating functional group. However, since N/O/S atoms are less likely to form chains this isn't anticipated to
    # be problematic. For this reason filter_resonance_structures() should be called before aromatic resonance
    # structures are generated.
    num_heavy_atoms = 0
    for atom in mol.atoms:
        if atom.isNOS():
            num_heavy_atoms += 1
        elif atom.isCarbon():
            for atom2, bond12 in atom.edges.items():
                if atom2.isNOS():
                    num_heavy_atoms += 1
                    continue  # count the C only once if it is adjacent to at least one N/O/S

    # If we still get too many resonance structures (as a rule of thumb, more than the number of the heavy atom in the
    # species) use other measures. This applies, for example, for [N]=S, CSS(C)=O, [NH]N=S=O.
    if len(filteredList) > num_heavy_atoms and num_heavy_atoms > 0:  # don't apply if mol has no N/O/S atoms
        for i in xrange(len(filteredList)):
            if ((sum([abs(atom.charge) for atom in filteredList[i].vertices]) == sum(
                    [abs(atom.charge) for atom in filteredList[0].vertices])) and
                    ((2 * filteredList[i].toSMILES().count('=') + 3 * filteredList[i].toSMILES().count('#')) == (
                    2 * filteredList[0].toSMILES().count('=') + 3 * filteredList[0].toSMILES().count('#')))):
                j = i + 1 # include structures with a minimal charge & bond spans combination regardless of
                # num_heavy_atoms (filteredList is sorted, so we know filteredList[0] has minimal spans)
                continue
            elif ((sum([abs(atom.charge) for atom in filteredList[i].vertices]) != sum(
                    [abs(atom.charge) for atom in filteredList[i-1].vertices])) or
                    ((2 * filteredList[i].toSMILES().count('=') + 3 * filteredList[i].toSMILES().count('#')) != (
                    2 * filteredList[i-1].toSMILES().count('=') + 3 * filteredList[i-1].toSMILES().count('#')))):
                j = i  # if at least one of the spans increases but i < num_heavy_atoms, keep the preceding structures
            if i == num_heavy_atoms:
                break
        filteredList = filteredList[:j]

    # make sure that the first original structure is also first in the list (unless it was filtered out).
    # Important whenever Species.molecule[0] is expected to be used (e.g., training reactions).
    for i in xrange(len(filteredList)):
        if filteredList[i].isIsomorphic(molList[0]):
            filteredList.insert(0, filteredList.pop(i))

    return filteredList


def generateAdjacentResonanceStructures(mol):
    """
    Generate all of the resonance structures formed by one allyl radical shift.
    Biradicals on a single atom are not supported.
    """
    cython.declare(isomers=list, paths=list, index=cython.int, isomer=Molecule)
    cython.declare(atom=Atom, atom1=Atom, atom2=Atom, atom3=Atom, bond12=Bond, bond23=Bond)
    cython.declare(v1=Vertex, v2=Vertex)

    isomers = []

    # Radicals
    if mol.isRadical():
        # Iterate over radicals in structure
        for atom in mol.vertices:
            paths = pathfinder.findAllDelocalizationPaths(atom)
            for atom1, atom2, atom3, bond12, bond23 in paths:
                # Adjust to (potentially) new resonance isomer
                atom1.decrementRadical()
                atom3.incrementRadical()
                bond12.incrementOrder()
                bond23.decrementOrder()
                # Make a copy of isomer
                isomer = mol.copy(deep=True)
                # Also copy the connectivity values, since they are the same
                # for all resonance forms
                for index in range(len(mol.vertices)):
                    v1 = mol.vertices[index]
                    v2 = isomer.vertices[index]
                    v2.connectivity1 = v1.connectivity1
                    v2.connectivity2 = v1.connectivity2
                    v2.connectivity3 = v1.connectivity3
                    v2.sortingLabel = v1.sortingLabel
                # Restore current isomer
                atom1.incrementRadical()
                atom3.decrementRadical()
                bond12.decrementOrder()
                bond23.incrementOrder()
                try:
                    isomer.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    pass  # Don't append resonance structure if it creates an undefined atomType
                else:
                    isomers.append(isomer)
    return isomers


def generateLonePairRadicalResonanceStructures(mol):
    """
    Generate all of the resonance structures formed by lone electron pair - radical shifts.
    These resonance transformations do not involve changing bond orders.
    NO2 example: O=[:N]-[::O.] <=> O=[N.+]-[:::O-]
    (where ':' denotes a lone pair, '.' denotes a radical, '-' not in [] denotes a single bond, '-'/'+' denote charge)
    """
    cython.declare(isomers=list, paths=list, index=cython.int, isomer=Molecule)
    cython.declare(atom1=Atom, atom2=Atom, v1=Vertex, v2=Vertex)

    isomers = []
    if mol.isRadical():  # Iterate over radicals in structure
        for atom1 in mol.vertices:
            if atom1.isNOS():
                paths = pathfinder.findAllDelocalizationPathsLonePairRadical(atom1)
                for atom1, atom2 in paths:
                    # Adjust to (potentially) new resonance isomer
                    atom1.decrementRadical()
                    atom1.incrementLonePairs()
                    atom1.updateCharge()
                    atom2.incrementRadical()
                    atom2.decrementLonePairs()
                    atom2.updateCharge()
                    # Make a copy of isomer
                    isomer = mol.copy(deep=True)
                    # Also copy the connectivity values, since they are the same
                    # for all resonance forms
                    for index in range(len(mol.vertices)):
                        v1 = mol.vertices[index]
                        v2 = isomer.vertices[index]
                        v2.connectivity1 = v1.connectivity1
                        v2.connectivity2 = v1.connectivity2
                        v2.connectivity3 = v1.connectivity3
                        v2.sortingLabel = v1.sortingLabel
                    # Restore current isomer
                    atom1.incrementRadical()
                    atom1.decrementLonePairs()
                    atom1.updateCharge()
                    atom2.decrementRadical()
                    atom2.incrementLonePairs()
                    atom2.updateCharge()
                    try:
                        isomer.updateAtomTypes(logSpecies=False)
                    except AtomTypeError:
                        pass  # Don't append resonance structure if it creates an undefined atomType
                    else:
                        isomers.append(isomer)
    return isomers


def generateLonePairMultipleBondResonanceStructures(mol):
    """
    Generate all of the resonance structures formed by lone electron pair - multiple bond shifts.
    This function deals with TWO very similar resonance structures, depending whether or not a radical is present:
    - rad N/S/O multiple bond <=> non-radical N/S/O w/ added lonePair and decremented bond (rad gain on other atom)
    - non-rad N/S/O multiple bond <=> non-radical N/S/O w/ added lonePair and decremented bond
    Two simple examples are [N]=C and N=C, respectively:
    - [:N.]=[CH2] <=> [::N]-[.CH2]
    - [:NH]=[CH2] <=> [::NH-]-[CH2+]
    (where ':' denotes a lone pair, '.' denotes a radical, '-' not in [] denotes a single bond, '-'/'+' denote charge)
    Although these are different resonance transformations, their algorithm is identical
    except for loosing/gaining a radical if a radical exists.
    Here atom1 refers to the N/S/O atom, atom 2 refers to the any R!H (atom2's lonePairs aren't affected)
    """
    cython.declare(isomers=list, paths=list, index=cython.int, isomer=Molecule)
    cython.declare(atom1=Atom, atom2=Atom, v1=Vertex, v2=Vertex, charged=cython.bint)

    isomers = []
    charged = False
    for atom1 in mol.vertices:
        if atom1.charge:
            charged = True
            break
    for atom1 in mol.vertices:
        if atom1.isNOS():
            paths = pathfinder.findAllDelocalizationPathsLonePairMultipleBond(atom1)
            for atom1, atom2, bond12, direction in paths:
                if charged and direction == 2 and abs(atom1.charge) != 1:
                    continue  # this avoids creating an additional partial charge separation to a molecule, unless
                    # atom1 is already charged with -1/+1, otherwise we'll never generate -2/+2 charges as in
                    # `[NH+]#[N+][N-2]`
                if atom1.radicalElectrons:  # the radical could be on either atom
                    atom1.decrementRadical()
                    atom2.incrementRadical()
                elif atom2.radicalElectrons:
                    atom2.decrementRadical()
                    atom1.incrementRadical()
                if direction == 1:  # The direction <increasing> the bond order
                    atom1.decrementLonePairs()
                    bond12.incrementOrder()
                elif direction == 2:  # The direction <decreasing> the bond order
                    atom1.incrementLonePairs()
                    bond12.decrementOrder()
                atom1.updateCharge()
                atom2.updateCharge()
                # Make a copy of isomer
                isomer = mol.copy(deep=True)
                # Also copy the connectivity values, since they are the same
                # for all resonance forms
                for index in range(len(mol.vertices)):
                    v1 = mol.vertices[index]
                    v2 = isomer.vertices[index]
                    v2.connectivity1 = v1.connectivity1
                    v2.connectivity2 = v1.connectivity2
                    v2.connectivity3 = v1.connectivity3
                    v2.sortingLabel = v1.sortingLabel
                # Restore current isomer
                if atom1.radicalElectrons:  # the radical could be on either atom
                    atom1.decrementRadical()
                    atom2.incrementRadical()
                elif atom2.radicalElectrons:
                    atom2.decrementRadical()
                    atom1.incrementRadical()
                if direction == 1:  # The direction <increasing> the bond order
                    atom1.incrementLonePairs()
                    bond12.decrementOrder()
                elif direction == 2:  # The direction <decreasing> the bond order
                    atom1.decrementLonePairs()
                    bond12.incrementOrder()
                atom1.updateCharge()
                atom2.updateCharge()
                try:
                    isomer.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    pass  # Don't append resonance structure if it creates an undefined atomType
                else:
                    isomers.append(isomer)
    return isomers

def generateAromaticResonanceStructures(mol, features=None):
    """
    Generate the aromatic form of the molecule. For radicals, generates the form with the most aromatic rings.
    
    Returns result as a list.
    In most cases, only one structure will be returned.
    In certain cases where multiple forms have the same number of aromatic rings, multiple structures will be returned.
    If there's an error (eg. in RDKit) it just returns an empty list.
    """
    cython.declare(molecule=Molecule, rings=list, aromaticBonds=list, kekuleList=list, maxNum=cython.int, molList=list,
                   newMolList=list, ring=list, bond=Bond, order=float, originalBonds=list, originalOrder=list,
                   i=cython.int, counter=cython.int)

    if features is None:
        features = analyzeMolecule(mol)

    if not features['isCyclic']:
        return []

    molecule = mol.copy(deep=True)

    # First get all rings in the molecule
    rings = molecule.getAllSimpleCyclesOfSize(6)

    # Then determine which ones are aromatic
    aromaticBonds = molecule.getAromaticRings(rings)[1]

    # If the species is a radical and the number of aromatic rings is less than the number of total rings,
    # then there is a chance that the radical can be shifted to a location that increases the number of aromatic rings.
    if (features['isRadical'] and not features['isArylRadical']) and (len(aromaticBonds) < len(rings)):
        if molecule.isAromatic():
            kekuleList = generateKekuleStructure(molecule)
        else:
            kekuleList = [molecule]
        _generateResonanceStructures(kekuleList, [generateAdjacentResonanceStructures])

        maxNum = 0
        molList = []

        # Iterate through the adjacent resonance structures and keep the structures with the most aromatic rings
        for mol0 in kekuleList:
            aromaticBonds = mol0.getAromaticRings()[1]
            if len(aromaticBonds) > maxNum:
                maxNum = len(aromaticBonds)
                molList = [(mol0, aromaticBonds)]
            elif len(aromaticBonds) == maxNum:
                molList.append((mol0, aromaticBonds))
    else:
        # Otherwise, it is not possible to increase the number of aromatic rings by moving electrons,
        # so go ahead with the inputted form of the molecule
        molList = [(molecule, aromaticBonds)]

    newMolList = []

    # Generate the aromatic resonance structure(s)
    for mol0, aromaticBonds in molList:
        if not aromaticBonds:
            continue
        # Save original bond orders in case this doesn't work out
        originalBonds = []
        for ring in aromaticBonds:
            originalOrder = []
            for bond in ring:
                originalOrder.append(bond.order)
            originalBonds.append(originalOrder)
        # Change bond types to benzene bonds for all aromatic rings
        for ring in aromaticBonds:
            for bond in ring:
                bond.order = 1.5

        try:
            mol0.updateAtomTypes(logSpecies=False)
        except AtomTypeError:
            # If this didn't work the first time, then there might be a ring that is not actually aromatic
            # Reset our changes
            for ring, originalOrder in itertools.izip(aromaticBonds, originalBonds):
                for bond, order in itertools.izip(ring, originalOrder):
                    bond.order = order
            # Try to make each ring aromatic, one by one
            i = 0
            counter = 0
            while i < len(aromaticBonds) and counter < 2*len(aromaticBonds):
                counter += 1
                originalOrder = []
                for bond in aromaticBonds[i]:
                    originalOrder.append(bond.order)
                    bond.order = 1.5
                try:
                    mol0.updateAtomTypes(logSpecies=False)
                except AtomTypeError:
                    # This ring could not be made aromatic, possibly because it depends on other rings
                    # Undo changes
                    for bond, order in itertools.izip(aromaticBonds[i], originalOrder):
                        bond.order = order
                    # Move it to the end of the list, and go on to the next ring
                    aromaticBonds.append(aromaticBonds.pop(i))
                    mol0.updateAtomTypes(logSpecies=False)
                    continue
                else:
                    # We're done with this ring, so go on to the next ring
                    i += 1
            # If we didn't end up making any of the rings aromatic, then this molecule is not actually aromatic
            if i == 0:
                # Move onto next molecule in the list
                continue

        for mol1 in newMolList:
            if mol1.isIsomorphic(mol0):
                break
        else:
            newMolList.append(mol0)

    return newMolList

def generateKekuleStructure(mol):
    """
    Generate a kekulized (single-double bond) form of the molecule.
    The specific arrangement of double bonds is non-deterministic, and depends on RDKit.

    Returns a single Kekule structure as an element of a list of length 1.
    If there's an error (eg. in RDKit) then it just returns an empty list.
    """
    cython.declare(atom=Atom, molecule=Molecule)

    for atom in mol.atoms:
        if atom.atomType.label == 'Cb' or atom.atomType.label == 'Cbf':
            break
    else:
        return []

    molecule = mol.copy(deep=True)

    try:
        kekulize(molecule)
    except KekulizationError:
        return []

    return [molecule]

def generateOppositeKekuleStructure(mol):
    """
    Generate the Kekule structure with opposite single/double bond arrangement
    for single ring aromatics.

    Returns a single Kekule structure as an element of a list of length 1.
    """

    # This won't work with the aromatic form of the molecule
    if mol.isAromatic():
        return []

    molecule = mol.copy(deep=True)

    aromaticBonds = molecule.getAromaticRings()[1]

    # We can only do this for single ring aromatics for now
    if len(aromaticBonds) != 1:
        return []

    numS = 0
    numD = 0
    for bond in aromaticBonds[0]:
        if bond.isSingle():
            numS += 1
            bond.order = 2
        elif bond.isDouble():
            numD += 1
            bond.order = 1
        else:
            # Something is wrong: there is a bond that is not single or double
            return []

    if numS != 3 or numD != 3:
        return []

    try:
        molecule.updateAtomTypes()
    except AtomTypeError:
        return []
    else:
        return [molecule]


def generateIsomorphicResonanceStructures(mol, saturateH=False):
    """
    Select the resonance isomer that is isomorphic to the parameter isomer, with the lowest unpaired
    electrons descriptor.
    We generate over all resonance isomers (non-isomorphic as well as isomorphic) and retain isomorphic
    isomers.
    If `saturateH` is `True`, then saturate `mol` with hysrogens and before generating the resonance structures
    and remove the hydrogens before returning `isomorphic_isomers`. This is useful when resonance structures are
    generated for molecules in which all hydrogens were intentionally removed as in generating augInChI. Otherwise,
    RMG will probably get many of the lonePairs and partial charges in a molecule wrong.
    WIP: do not generate aromatic resonance isomers.
    """

    cython.declare(isomorphic_isomers=list, isomers=list, index=int, max_val_e=int, order=float, num_H_to_add=int,
                   isomer=Molecule, newIsomer=Molecule, isom=Molecule, atom=Atom, a=Atom, b=Bond, newAtoms=list)

    if saturateH:  # Add explicit hydrogen atoms to complete structure if desired
        newAtoms = []
        for atom in mol.vertices:
            max_val_e = PeriodicSystem.valence_electrons[atom.symbol]
            order = atom.getBondOrdersForAtom()

            num_H_to_add = max_val_e - atom.radicalElectrons - 2 * atom.lonePairs - int(
                order) - atom.charge

            for index in xrange(num_H_to_add):
                a = Atom(element='H', radicalElectrons=0, charge=0, label='', lonePairs=0)
                b = Bond(atom, a, 'S')
                newAtoms.append(a)
                atom.bonds[a] = b
                a.bonds[atom] = b
        mol.vertices.extend(newAtoms)

    isomorphic_isomers = [mol]  # resonance isomers that are isomorphic to the parameter isomer.

    isomers = [mol]

    # Iterate over resonance isomers
    index = 0
    while index < len(isomers):
        isomer = isomers[index]
        
        newIsomers = []
        for algo in populateResonanceAlgorithms():
            newIsomers.extend(algo(isomer))
        
        for newIsomer in newIsomers:
            # Append to isomer list if unique
            for isom in isomers:
                if isom.copy(deep=True).isIsomorphic(newIsomer.copy(deep=True)):
                    isomorphic_isomers.append(newIsomer)
                    break
            else:
                isomers.append(newIsomer)

        # Move to next resonance isomer
        index += 1

    if saturateH:  # remove hydrogens before returning isomorphic_isomers
        for isomer in isomorphic_isomers:
            hydrogens = filter(lambda at: at.number == 1, isomer.atoms)
            [isomer.removeAtom(h) for h in hydrogens]

    return isomorphic_isomers


def generateClarStructures(mol):
    """
    Generate Clar structures for a given molecule.

    Returns a list of :class:`Molecule` objects corresponding to the Clar structures.
    """
    cython.declare(output=list, molList=list, newmol=Molecule, aromaticRings=list, bonds=list, solution=list,
                   y=list, x=list, index=cython.int, bond=Bond, ring=list)

    if not mol.isCyclic():
        return []

    try:
        output = _clarOptimization(mol)
    except ILPSolutionError:
        # The optimization algorithm did not work on the first iteration
        return []

    molList = []

    for newmol, aromaticRings, bonds, solution in output:

        # The solution includes a part corresponding to rings, y, and a part corresponding to bonds, x, using
        # nomenclature from the paper. In y, 1 means the ring as a sextet, 0 means it does not.
        # In x, 1 corresponds to a double bond, 0 either means a single bond or the bond is part of a sextet.
        y = solution[0:len(aromaticRings)]
        x = solution[len(aromaticRings):]

        # Apply results to molecule - double bond locations first
        for index, bond in enumerate(bonds):
            if x[index] == 0:
                bond.order = 1 # single
            elif x[index] == 1:
                bond.order = 2 # double
            else:
                raise ValueError('Unaccepted bond value {0} obtained from optimization.'.format(x[index]))

        # Then apply locations of aromatic sextets by converting to benzene bonds
        for index, ring in enumerate(aromaticRings):
            if y[index] == 1:
                _clarTransformation(newmol, ring)

        try:
            newmol.updateAtomTypes()
        except AtomTypeError:
            pass
        else:
            molList.append(newmol)

    return molList


def _clarOptimization(mol, constraints=None, maxNum=None):
    """
    Implements linear programming algorithm for finding Clar structures. This algorithm maximizes the number
    of Clar sextets within the constraints of molecular geometry and atom valency.

    Returns a list of valid Clar solutions in the form of a tuple, with the following entries:
        [0] Molecule object
        [1] List of aromatic rings
        [2] List of bonds
        [3] Optimization solution

    The optimization solution is a list of boolean values with sextet assignments followed by double bond assignments,
    with indices corresponding to the list of aromatic rings and list of bonds, respectively.

    Method adapted from:
        Hansen, P.; Zheng, M. The Clar Number of a Benzenoid Hydrocarbon and Linear Programming.
            J. Math. Chem. 1994, 15 (1), 93–107.
    """
    cython.declare(molecule=Molecule, aromaticRings=list, exo=list, l=cython.int, m=cython.int, n=cython.int,
                   a=list, objective=list, status=cython.int, solution=list, innerSolutions=list)

    from lpsolve55 import lpsolve
    import signal

    # Save the current signal handler
    sig = signal.getsignal(signal.SIGINT)

    # Make a copy of the molecule so we don't destroy the original
    molecule = mol.copy(deep=True)

    aromaticRings = molecule.getAromaticRings()[0]

    if not aromaticRings:
        return []

    # Get list of atoms that are in rings
    atoms = set()
    for ring in aromaticRings:
        atoms.update(ring)
    atoms = list(atoms)

    # Get list of bonds involving the ring atoms, ignoring bonds to hydrogen
    bonds = set()
    for atom in atoms:
        bonds.update([atom.bonds[key] for key in atom.bonds.keys() if key.isNonHydrogen()])
    bonds = list(bonds)

    # Identify exocyclic bonds, and save their bond orders
    exo = []
    for bond in bonds:
        if bond.atom1 not in atoms or bond.atom2 not in atoms:
            if bond.isDouble():
                exo.append(1)
            else:
                exo.append(0)
        else:
            exo.append(None)

    # Dimensions
    l = len(aromaticRings)
    m = len(atoms)
    n = l + len(bonds)

    # Connectivity matrix which indicates which rings and bonds each atom is in
    # Part of equality constraint Ax=b
    a = []
    for atom in atoms:
        inRing = [1 if atom in ring else 0 for ring in aromaticRings]
        inBond = [1 if atom in [bond.atom1, bond.atom2] else 0 for bond in bonds]
        a.append(inRing + inBond)

    # Objective vector for optimization: sextets have a weight of 1, double bonds have a weight of 0
    objective = [1] * l + [0] * len(bonds)

    # Solve LP problem using lpsolve
    lp = lpsolve('make_lp', m, n)               # initialize lp with constraint matrix with m rows and n columns
    lpsolve('set_verbose', lp, 2)               # reduce messages from lpsolve
    lpsolve('set_obj_fn', lp, objective)        # set objective function
    lpsolve('set_maxim', lp)                    # set solver to maximize objective
    lpsolve('set_mat', lp, a)                   # set left hand side to constraint matrix
    lpsolve('set_rh_vec', lp, [1] * m)          # set right hand side to 1 for all constraints
    lpsolve('set_constr_type', lp, ['='] * m)   # set all constraints as equality constraints
    lpsolve('set_binary', lp, [True] * n)       # set all variables to be binary

    # Constrain values of exocyclic bonds, since we don't want to modify them
    for i in range(l, n):
        if exo[i - l] is not None:
            # NOTE: lpsolve indexes from 1, so the variable we're changing should be i + 1
            lpsolve('set_bounds', lp, i + 1, exo[i - l], exo[i - l])

    # Add constraints to problem if provided
    if constraints is not None:
        for constraint in constraints:
            try:
                lpsolve('add_constraint', lp, constraint[0], '<=', constraint[1])
            except:
                logging.error('Unable to add constraint: {0} <= {1}'.format(constraint[0], constraint[1]))
                logging.error('Cannot complete Clar optimization for {0}.'.format(str(mol)))
                logging.error(mol.toAdjacencyList())
                raise

    status = lpsolve('solve', lp)
    objVal, solution = lpsolve('get_solution', lp)[0:2]
    lpsolve('delete_lp', lp)  # Delete the LP problem to clear up memory

    # Reset signal handling since lpsolve changed it
    try:
        signal.signal(signal.SIGINT, sig)
    except ValueError:
        # This is not being run in the main thread, so we cannot reset signal
        pass

    # Check that optimization was successful
    if status != 0:
        raise ILPSolutionError('Optimization could not find a valid solution.')

    # Check that we the result contains at least one aromatic sextet
    if objVal == 0:
        return []

    # Check that the solution contains the maximum number of sextets possible
    if maxNum is None:
        maxNum = objVal  # This is the first solution, so the result should be an upper limit
    elif objVal < maxNum:
        raise ILPSolutionError('Optimization obtained a sub-optimal solution.')

    if any([x != 1 and x != 0 for x in solution]):
        raise ILPSolutionError('Optimization obtained a non-integer solution.')

    # Generate constraints based on the solution obtained
    y = solution[0:l]
    new_a = y + [0] * len(bonds)
    new_b = sum(y) - 1
    if constraints is not None:
        constraints.append((new_a, new_b))
    else:
        constraints = [(new_a, new_b)]

    # Run optimization with additional constraints
    try:
        innerSolutions = _clarOptimization(mol, constraints=constraints, maxNum=maxNum)
    except ILPSolutionError:
        innerSolutions = []

    return innerSolutions + [(molecule, aromaticRings, bonds, solution)]


def _clarTransformation(mol, aromaticRing):
    """
    Performs Clar transformation for given ring in a molecule, ie. conversion to aromatic sextet.

    Args:
        mol             a :class:`Molecule` object
        aromaticRing    a list of :class:`Atom` objects corresponding to an aromatic ring in mol

    This function directly modifies the input molecule and does not return anything.
    """
    cython.declare(bondList=list, i=cython.int, atom1=Atom, atom2=Atom, bond=Bond)

    bondList = []

    for i, atom1 in enumerate(aromaticRing):
        for atom2 in aromaticRing[i + 1:]:
            if mol.hasBond(atom1, atom2):
                bondList.append(mol.getBond(atom1, atom2))

    for bond in bondList:
        bond.order = 1.5
